Install Dependencies:

Ensure that the necessary dependencies are installed for the backend. These dependencies are:

express: A web framework for Node.js.

body-parser: A middleware to parse incoming request bodies.

node-fetch: A library to make HTTP requests to the n8n webhook.

You can tell the assistant to run this command in the terminal:

bash
Copy
Edit
npm install express body-parser node-fetch
Create the Backend Code (index.js):

Create a file named index.js in the project folder.

Add the following code to handle POST requests from the frontend, send the question to the n8n webhook, and return the answer.

javascript
Copy
Edit
import express from 'express'; // Express for handling HTTP requests
import bodyParser from 'body-parser'; // Body parser to parse JSON
import fetch from 'node-fetch'; // Node-fetch to make HTTP requests

const app = express(); 
const port = process.env.PORT || 3000;

// Middleware to parse JSON request bodies
app.use(bodyParser.json());

// POST endpoint that handles the form submission
app.post('/ask', async (req, res) => {
  const question = req.body.question; // Get question from the request body

  if (!question) {
    return res.status(400).json({ error: "Question is required." });
  }

  try {
    // Send the question to the n8n webhook
    const response = await fetch('https://your-n8n-webhook-url', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ question }),
    });

    const data = await response.json(); // Parse the response from n8n

    // Return the answer from n8n
    res.json({ result: data.result || "No answer found." });
  } catch (error) {
    // If an error occurs, respond with an error message
    console.error(error);
    res.status(500).json({ error: "An error occurred while processing your request." });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
Create the Frontend Code (index.html):

Create an index.html file for the frontend.

Add the following code to allow users to input their questions and display the answers.

html
Copy
Edit
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ask a Question</title>
  <style>
    /* Add your modern design styles here */
  </style>
</head>
<body>

  <div class="container">
    <h2>Ask your question</h2>
    <form id="askForm">
      <input type="text" id="question" required placeholder="Type your question here...">
      <button type="submit">Get Answer</button>
    </form>
    <p id="loading" class="loading">Waiting for answer...</p>
    <p id="answer" class="result"></p>
  </div>

  <script>
    document.getElementById("askForm").addEventListener("submit", async function(e) {
      e.preventDefault();

      const question = document.getElementById("question").value;
      document.getElementById("loading").style.display = "block";  // Show loading message

      try {
        const response = await fetch("/ask", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ question }),
        });

        const data = await response.json();
        document.getElementById("loading").style.display = "none";  // Hide loading message
        document.getElementById("answer").textContent = data.result || "No answer found.";
      } catch (error) {
        document.getElementById("loading").style.display = "none";
        document.getElementById("answer").textContent = "Error fetching data. Please try again later.";
      }
    });
  </script>

</body>
</html>
Run the Backend Server:

Instruct the assistant to run the server using this command:

bash
Copy
Edit
node index.js
Test the Web Application:

Ensure the backend is running on the correct port (usually http://localhost:3000).

Open the index.html file in a web browser and test the functionality by entering a question.

The frontend should send the question to the backend, which will then forward it to the n8n webhook. The answer should be returned to the user on the webpage.

